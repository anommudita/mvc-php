Pertemuan 1 ---------------------------------------------------------------------------------------------------
Pendahuluan MVC (Model-View-Controller)
Merupakan pola arsitektur pada perancangan perangkat lunak berorientasi objek.
- tujuan utama MVC, dimana Memisahkan antara tampilan, data dan proses.
Memiliki 3 Kompenen Utama
1. Model(data) = Representasi Pengetahuan, Mengelola Bisnis, Logika Bisnis
2. Controller(proses) = Perantara antara model dan view, menangani pemrosesan pada aplikasi, menangani aksi dari user(klik dan mengisi form)
3. View(tampilan) = Output, apa yang dilihat oleh user , Representasi visual dari model, lapisan Presentasi.

-- Kenapa menggunakan MVC --
1. Organisasi dan Struktur
2. Pemisahan logic dan tampilan
3. Perawatan Code atau maintaine
4. Impelementasi konsep OOP yang sudah dipelajari
5. Digunakan oleh banyak Web Application Framework yang populer

FrameWork yang menerapkan MVC, tetapi arsitekturnya beda. 
1. PHP = CodeIgniter , Laravel , Yii
2. Java = Spring MVC, JSF, Struts
3. Python = Django, CherryPy
4. Ruby = Ruby on rails, sinatra
5. Java Script = AngularJS, React , Backbone.JS



untuk tampilan defaultnya akan memanggil home atau index dan kita membuat url rapi misal phpmvc/home/index => htaccess
ketika tidak ada method maka method defaultnya yang tampil ya!
phpmvc/about(controller)/index(method)/anom/gamer(parameter)

Untuk FrameWork yang menerapkan konsep MVC tetapi lebih Kompleks :
Contoh Framework dari CodeIgniter 3
+-----------+                                +------------+          Jika controller membutuhkan ini:
| Index.php | ==> Rounting ==> Security ==>  |Application |  <====   (Model, Libraries,Helper, Plugins,Scripts)
| Index.php |        V                       |Controller  |   ====>
| Index.php | <==  Caching <==  View   <===  +------------+            
+-----------+ (cara cepat jika sudah pernah dikunjungi)                         


Application Flow yang akan dibuat dalam playlist MVC Unpas
+-----------+                    +------------+           Jika controller membutuhkan ini:
| Index.php | ==> Rounting ==>   |Application |  <====    (Models/database)
| Index.php |                    |Controller  |   ====>
| Index.php | <==   View   <===  |            |
+-----------+                     +------------+

Petemuan 2 -------------------------------------------------------------------------------------------------------------------------------
Persiapan folder untuk membuat Struktur MVC



1. Folder Public (user) :
-css
-img
-js

2. Folder APP (backend)
- controller
- core
- models
- views

Persiapan file dan foldernya. ==>phpmvc
folder public = untuk file-file yang bisa diakses user
folder app = file-file yang menyimpan data mvc kita(backend) tidak bisa diakses oleh user
folder core = inti dari MVC , bagaimana kita membuat routing ya gitu contohnya!
folder controller = menyimpanan data controller
folder models = menyimpan data Models
folder views = antarmuka yang disajikan oleh controller ==> home untuk Representasikan beberapa method jika 
memiliki banyak ya contoh index.html,home.html

- membuat file index.php dan memanggil controller menggunakan teknik bootstraping (init.php)
- file php berisikan bootstraping ke file app atau backend
- Class penamaannya huruf besar ya!
- Membuat Class Controller difolder core, sedangkan controller yang ada di folder controllers itu merupakan extend dari Controlder folder core


Pertemuan 3 ------------------------------------------------------------------------------------------------------
-- Routing --------------------------------------------------------------------------------------------------------------------------

- Di pembelajaran kali ini membuat URL rapi atau Pretty URL, nah nanti sewaktu-waktu membuat class atau user yang 
menginputkan maka url yang banyak itu akan disembunyikan


Action : 
1. konfigurasi file APP.php untuk melihat nilai array-nya hasil dari mengetikan data di url
2. Teknik Parsing data(memecahkan data untuk mengetahui yang mana datanya) untuk mengambil url lalu memecahkan sesuai dengan keinginan kita
3. Memblok akses folder app agar tidak bisa diakses oleh user dengan cara konfigurasi di file htaccess
4. Untuk membuat file htaccess harus buat di TextEditor dan tidak bisa di buat difile explore
5. Membuat 2 file htaccess untuk folder app dan folder public 
- untuk di folder app semua blok accessnya
- untuk di folder public hanya tertentu saja boleh diblok 
6. Jika sudah maka hasilnya null jika tidak null maka isi nilai pada urlnya ya!
7. dipecah menjadi array dengan perkata

-  Controller tidak ada maka Controller atau methodnya yang dipanggil hanya defautlnya 
- membuat file htaccess = file yang bisa kita gunakan untuk memodifikasi konfigurasi dari server appache kita
  diKonsep MVC memiliki banyak folder, User hanya boleh lihat folder Public saja dengan cara memblock accessnya

Fungsi yang ada di file htaccess
- Options-Indexes = user tidak boleh membuka index apapun dan memblock accessnya.
- Options -Multiviews = untuk menghindari kesalahan atau ambigu ketika kita memanggil folder atau file public ini.
- RewriteEngine on = kita akan menjalankan proses Rewrite, proses memiliki beberapa konfigurasi seperti dibawah ini
- RewriteCond atau kondisi %{REQUEST_FILENAME} !-d = URL yang nanti user tulis itu kita abaikan foldernya(dir) 
- RewriteCond %{REQUEST_FILENAME} !-f = URL yang nanti user tulis itu kita abaikan file(file)
   membuat 2 yaitu file dan folder, itu akan membedakan Controller dan methodnya nanti
- RewriteRule ^(.*)$ index.php?url=$1 [L] = Aturan menulis ulang dengan menggunakan ekpresi regget
 tanda ^ = jika sudah difolder public maka isi / lalu ambil string yang ditulis user;
 ^(.*)$ = ambil semua karakternya kecuali enter
 index.php?url=$1 = sebagai placeholder saja dan $1 = jika sudah menulis file karakter semua( ^(.*)$) maka simpan disana
 [L] = jika rule sudah terpenuhi jangan jalankan rule lain setelah ini, ini untuk menghindari orang yang melakukan sesuatu yang jahat


 Pertemuan 4 ----------------------------------------------------------------------------------------------------------
 -- Controller --
 Petemuan sebelumnya kita sudah membuat url kita tulis menjadi elemen array dan dihubungkan ke Controller atau method

- Pertemuan kali ini membuat controller default untuk jika ada user memasukan url yang tidak ada datanya maka, controller default yang akan dipanggil



action :
1. Membuat properti protected di Class app
2. Membuat Controller Home.app
3. menambahkan file Home.php di folder Controller
4. menjadikan controller sebagai index yang pertama yaitu 0
5. Jika user memasukan kontroller tidak ada sistem maka sistem akan meredirect ke default home conttoller-nya.
6. sama juga akan membuat method seperti controller dan selanjutnya membuat paramaternya
misal : /home/index/satu/dua/
home ==> sebagai controller
index ==> sebagai method
satu atau dua ===> sebagai parameternya

7. membuat  file conttroler baru dengan nama About ingin mencoba apakahs sesuai atau tidak
8. ada eror karena conttoler about tidak memiliki method defaultnya, maka dari itu harus buat defaultnya, edit file about.php
9. Membuat agar nilai default ditampilankan dicontroller about dan apabila user memasukan nilai url maka nilai tersebut akan ditampilkan 


Petemuan 5 --------------------------------------------------------------------------------------------------------------
-- View ---


action :
1. public index beri this->view()
2. membuat function untuk memanggil view
3. Class Home Extend ke Controller 
4. Membuat file index.php dan di page.php di folder Views
5. bagaimana cara menampung nilai diview dengan menaruh array
6. tidak tampil karena data belum ditampikan di index.php
7. memisahkan header dengan footer, membuat folder bernama templates dan membuat file header.php, footer.php


Pertemuan 6 --------------------------------------------------------------------------------------------------------------
-- Assets ---
menaruh css, images, dan js di MVC untuk PHP

1. download bootstrap
2. css taruh di header sedangkan js taruh di footer
3. untuk memanggil css via local tidak boleh menggunakan relative url seperti ".../ atau masukan nama folder"
harus menggunakan absolute url seperti local/phpmvc/public/css.
4.  memanggil file js untuk footer file bootstrap.js aja diganti selain itu tidak seperti jquery tetap online saja
5. jika sudah terhubung font dih1 akan berbeda
6. membuat file Constants.php untuk memanggil url, dengan itu tidak semua file kita ubah melainkan satu saja
jika required terlalu banyak maka kita bisa menerapkan teknik autoloading
7. Membuat navbar dengan menggunakan bootstrap dan membuat redirect ke sesuai dengan classnya.
8. Membuat jumbrotron di halaman home


Pertemuan 7 --------------------------------------------------------------------------------------------------------------
-- Model --
Mengarah ke database untuk bisnin logic(objek domain, data mapper, data service) dari aplikasi kita lebih mengelola data

action :
1. Data tidak lagi harus  diinputkan melalui url melainkan dari tempat lain yaitu model
2. menambahkan data di halaman home, membuat $data['nama'] = hasil value akan disimpan dimodel
3. Membuat file atau class dengan nama User_model.php(dengan mengisi model nanti kedepannya ada membuat class nama user binggung cara membedakannya)
 lalu membuat class dan methodnya dengan property private.
4. Membuat method model di Folder Core di file Controller.
5. Jika sudah membuat maka tampilakan data tersebut 
6. Memambahakn menu dinavbar dengan nama Mahasiswa
7. Membuat class Mahasiswa dan disimpan di folder controller.
8. ingat extend ke contoller dan buat folder sesuai dengan function view agar tidak eror
9. Membuat table index.php pada folder mahasiswa di views
10. Membuat model dengan nama Mahasiswa_model.php difolder models
11. Menampilkan data di index menggunakan array dan perulangan foreach
12. Kasus Baru bagaimana data tersebut menggunakan database? pertama kita akan membua database dengan nama phpmvc dengan nama table mahasiswa
13. set model mahasiswa agar bisa terhubung dengan database dan mengambil datanya.

Pertemuan 8 -----------------------------------------------------------------------------------------------------------------
-- Database Wrapper --

ACtion : 
1. Menambahakan konfigurasi di file Mahasiswa_model.php, memisahkan classnya, agar data" konek ke database tidak tersimpan difile tersebut.
2.   Membuat folder config yang berisikan file konfigurasi, jadinya file yang bernama Constants tidak digunakan lagi.
3.  Membuat variable private di file database.php dan membuat method konstruktor yang berisikan file seperti di mahasiswa_model.php
4. menambahkan option didalah method konstruk database, untuk optimaliasai ke database kita terus hidup dan jika gagal ada notifikasi bro!
5. membuat method query secara generic sehingga bisa digunakan CRUD 
6. penjelasan sudah ada di komentar database.php ya 
7. required once di init.php untuk memanggil databasenya
8. membuat method di file mahasiswa_model untuk mengambil datanya langsung didatabase.php (agar terhubung)
9. membuat tampilan bootstrap dengan menampilkan setiap detail mahasiswa
10. membuat method detail($id); di controller mahasiswa.php
11. membuat method getmahasiswabyid berdasarkan idnya di folder models dengan nama file Mahasiswa_model.php
12. Membuat card dari bootstrap untuk setiap detail mahaiswa dengan hanya mengklik saja saja id langsung diget

Pertemuan 9 -----------------------------------------------------------------------------------------------------------------
-- Insert Data -- 
Kita akan memulai membuat CRUD menggunakan metode MVC tapi di pertemuan kali membahas tentang Create atau Insert Data, kemudian kita 
membuat insert data dengan bantuan Modal Box dari bootstrap versi 4.1, MOdal Box (notifikasi)

Action :
1. Membuat tombol tambah mahasiswa diview mahasiswa ok!
2. Button atau tombol menggunakan bootstrap yang bernama Modal Box 
3. Mencopy Modal Boxnya, kemudian paste button dibagian atas dan untuk MOdal Boxnya letakan dibagian bawah agar tersembunyi (mahasiswa/index)
4. data-target di buuton harus sama dengan id yang ada modal box supaya ditrigger langsung dan menampilkan box modelnya
5. aria-labelledby harus sma juga dengan id di h5
6. Isi Konten dari Box Model kita isi dengan form yang ada dibootstrap
7. Tambah kan combo form atau option pada html
8. Membuat Method tambah di Mahasiswa.php di controller
9. Tombol Button ganti type dengan nama "Submit"
10. Membuat method tambahdatamahasiswa() dimodel_mahasiswa.php 
11. agar method tambahdatamahaiswa() mengembalikan nilai jadi kita membuat function di Database Wrapper atau database.php

Pertemuan 10 ----------------------------------------------------------------------------------------------------------------
-- Flash Message --
Pesan Kilat atau notifikasi untuk memberitahu apakah feature CRUD sudah dieksesuki dengan benar atau salah!, Untuk membuat flash 
message kita membutuhkan konsep S_SESSION --> variable superglobal

Action :
1. Membuat file bernama Flasher.php di folder Core
2. membuat method statis setflash dan flash yang berisikan bootstrap alert
3. menambahkan init.php untuk bagian Flasher.php-nya
4. menjalankan sessionnya karena jika menggunakan $S_SESSION kita harus menjalankannya terlebih  dahulu, kemudian untuk menjalaknnya kita 
pergi ke index.php ==> yang didalam folder public (ada codenya untuk menjalankannya)
5. index.php pada view mahasiswa berikan method flasher yang sudah dibuatkan
6. setelah itu pergi ke contoller Mahasiswa.php lalu berikan method flasher::setFlash dan beri nilai parameternya pesan, aksi, tipe bootstrap


 Pertemuan 11 --------------------------------------------------------------------------------------------------------------
 -- Delete Data --
 Action:
 1. Menambahkan button hapus untuk fitur hapus di index.php views mahasiswa
 2. merapikan tombol button hapus agar tidak mepet dengan button details
 3. berikan konfirmasi pada button hapus supaya tidak sengaja mengkliknya, dengan cara memberikan onclick javascript jika menginginkan 
 tampilan bagus makan gunakan Switch Alert agar lebih menarik dilihat
 4. Membuat method hapus di controller mahasiswa
 5. membuat method hapusDatamahaiswa di model_mahasiswa.php


Pertemuan 12 ----------------------------------------------------------------------------------------------------------------
-- Update Data --
Menambahakan feature update di website MVC kita. Dengan metode AJAX
Action :
1. Mekanismenya seperti ini, jika kita menekan button update maka data kita sudah berisi diform modal box tersebut, ini menggunakan metode
AJAX
2. Menambahkan button ubah
3. Memanggil Modal Box bootstrap dengan cara panggil class dari form tambah
4. Membuat file js.script dan memanggil file script.js di bagian footer templates
5. Membuat program sederhana untuk mengetes apakah file JS sudah masuk atau belum
6. Kalau Bisa sih belajar DOM JS sehingga website yang kita develop interaktif (hubungan dua arah)
7. Memberikan class pada button ubah bernama tampilModalUbah di index.php Mahasiswa
8. Memberikan class pada button tambah bernama tombolTambahData di index.php Mahasiswa
9. Memberian class pada Box Modal dengan naama FormModalLabel di index.php Mahasiswa
10. Untuk tombol submit sebaiknya jangan ditambahkan class baru melainkan dengan cara memanggil class containernya dan dibalutin dengan
dengan buttonp[type=submit];
11. Code ada di Script.js!
12 AJAX merupakan teknologi untuk membuat website interaktif, yang membuat permintaan data atau request data terjadi di bagain elementnya saja
tida me relod semua halamannya.
13 . Menambahakan code in data-id="<?=$mhs['id'];?> di button ubah, dalam hal ini membuat jquery menangkap datanya agar jquery tahu 
id apa aja yang mau di ambil


Pertemuan 13 ---------------------------------------------------------------------------------------------------------------
-- Seaching Data -- 
faadadad

